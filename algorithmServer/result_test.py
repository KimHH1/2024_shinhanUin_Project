# -*- coding: utf-8 -*-
"""result_test

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MdJdk8nF_cvrXPIfIlFTb7nt6VLG4C7v
"""

# import json
# import time
# from watchdog.observers import Observer
# from watchdog.events import FileSystemEventHandler
# import os
# import subprocess  # subprocess 모듈을 임포트
# import socket

# # 서버 설정
# server_address = "127.0.0.1"  # 서버의 실제 IP 주소 또는 도메인 이름
# server_port = 12345         # 서버 포트 번호
# client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# client_socket.connect((server_address, server_port))

# # JSON 파일 경로
# json_file_path = "/home/ubuntu/received_data.json"
# stored_data = {}


# # JSON 파일 읽기 및 데이터 처리
# def read_json_file():
#     try:
#         with open(json_file_path, 'r', encoding='utf-8') as file:
#             data = json.load(file)  # JSON 파일을 파이썬 객체로 변환
#             print("파일 내용:", data)  # 데이터 출력
#             # 데이터 추출
#             user_id = data['userId']
#             lat = data['start_location_lat']
#             lng = data['start_location_lng']
#             month = data['start_Day'].split('.')[1]  # 월 추출
#             address = data['city']  # 예시로 'city' 필드 사용
#             start_date = data['start_Day']
#             travel_name = data['travel_name']
#             dType = data['Type']
#             categories = data['Question']  # Question 값을 categories로 정의

#             # 저장 로직
#             if user_id not in stored_data:
#                 stored_data[user_id] = []  # user_Id가 없으면 빈 리스트 생성

#            # 데이터 추가
#             stored_data[user_id].append({
#                 'userId': user_id,
#                 'category': categories,
#                 'latitude': lat,
#                 'longitude': lng,
#                 'month': month,
#                 'address': address,
#                 'start_date': start_date,
#                 'travel_name': travel_name,
#                 'Type': dType
#             })

#             latest_data = stored_data[user_id][-1]
#             run_process_json(latest_data)

#     except FileNotFoundError:
#         print("파일이 존재하지 않습니다.")
#     except json.JSONDecodeError:
#         print("JSON 파일을 읽는 중 오류가 발생했습니다.")
#     except Exception as e:
#         print("오류 발생:", e)

# def run_process_json(json_data):
#    json_string = json.dumps(json_data, ensure_ascii=False)
#    client_socket.send(json_string.encode('utf-8'))

# class JsonFileEventHandler(FileSystemEventHandler):
#     def on_modified(self, event):
#         absolute_json_path = os.path.abspath(json_file_path)

#         if os.path.abspath(event.src_path) == absolute_json_path:
#             print("JSON 파일이 변경되었습니다. 새로 읽습니다.")
#             read_json_file()

# if __name__ == "__main__":
#     # JSON 파일 변경 감지 설정
#     event_handler = JsonFileEventHandler()
#     observer = Observer()
#     observer.schedule(event_handler, path='/home/ubuntu', recursive=False)  # 현재 디렉토리에서 변경 사항 감지
#     observer.start()

#     try:
#         print("JSON 파일 변경 감지를 시작합니다...")
#         while True:
#             time.sleep(1)  # 무한 루프
#     except KeyboardInterrupt:
#         observer.stop()
#     observer.join()

import json
import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import os
import socket

# 서버 설정
server_address = "127.0.0.1"  # 서버의 실제 IP 주소 또는 도메인 이름
server_port = 12345            # 서버 포트 번호
client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client_socket.connect((server_address, server_port))

# JSON 파일 경로
json_file_path = "/home/ubuntu/received_data.json"
stored_data = {}

# JSON 파일 읽기 및 데이터 처리
def read_json_file():
    try:
        with open(json_file_path, 'r', encoding='utf-8') as file:
            data = json.load(file)  # JSON 파일을 파이썬 객체로 변환
            print("파일 내용:", data)  # 데이터 출력
            # 데이터 추출
            user_id = data['userId']
            lat = data['start_location_lat']
            lng = data['start_location_lng']
            month = data['start_Day'].split('.')[1]  # 월 추출
            address = data['city']  # 예시로 'city' 필드 사용
            start_date = data['start_Day']
            travel_name = data['travel_name']
            dType = data['Type']
            categories = data['Question']  # Question 값을 categories로 정의

            # 저장 로직
            if user_id not in stored_data:
                stored_data[user_id] = []  # user_Id가 없으면 빈 리스트 생성

            # 중복 데이터 체크
            new_entry = {
                'userId': user_id,
                'category': categories,
                'latitude': lat,
                'longitude': lng,
                'month': month,
                'address': address,
                'start_date': start_date,
                'travel_name': travel_name,
                'Type': dType
            }

            # 중복 확인
            if new_entry not in stored_data[user_id]:
                stored_data[user_id].append(new_entry)
                run_process_json(new_entry)  # 새로운 데이터가 추가되면 전송

    except FileNotFoundError:
        print("파일이 존재하지 않습니다.")
    except json.JSONDecodeError:
        print("JSON 파일을 읽는 중 오류가 발생했습니다.")
    except Exception as e:
        print("오류 발생:", e)

def run_process_json(json_data):
    json_string = json.dumps(json_data, ensure_ascii=False)
    client_socket.send(json_string.encode('utf-8'))

class JsonFileEventHandler(FileSystemEventHandler):
    def on_modified(self, event):
        absolute_json_path = os.path.abspath(json_file_path)

        if os.path.abspath(event.src_path) == absolute_json_path:
            print("JSON 파일이 변경되었습니다. 새로 읽습니다.")
            read_json_file()

if __name__ == "__main__":
    # JSON 파일 변경 감지 설정
    event_handler = JsonFileEventHandler()
    observer = Observer()
    observer.schedule(event_handler, path='/home/ubuntu', recursive=False)  # 현재 디렉토리에서 변경 사항 감지
    observer.start()

    try:
        print("JSON 파일 변경 감지를 시작합니다...")
        while True:
            time.sleep(1)  # 무한 루프
    except KeyboardInterrupt:
        observer.stop()
    observer.join()