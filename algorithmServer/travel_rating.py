# -*- coding: utf-8 -*-
"""travel_rating

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xpUhTKXK3TND_mVJgUeFcNunxcfRvD5n
"""

import json
import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import os
import subprocess  # subprocess 모듈을 임포트


# JSON 파일 경로
json_file_path = "/home/ubuntu/rating_data.json"
stored_data = {}


# JSON 파일 읽기 및 데이터 처리
def read_json_file():
    try:
        with open(json_file_path, 'r', encoding='utf-8') as file:
            data = json.load(file)  # JSON 파일을 파이썬 객체로 변환
            print("파일 내용:", data)  # 데이터 출력
            # 데이터 추출
            user_id = data['userId']
            rating = data['rating']

            # 저장 로직
            if user_id not in stored_data:
                stored_data[user_id] = []  # user_Id가 없으면 빈 리스트 생성

           # 데이터 추가
            stored_data[user_id].append({
                'userId': user_id,
                'rating': rating
            })

            latest_data = stored_data[user_id][-1]
            run_process_json(latest_data)

    except FileNotFoundError:
        print("파일이 존재하지 않습니다.")
    except json.JSONDecodeError:
        print("JSON 파일을 읽는 중 오류가 발생했습니다.")
    except Exception as e:
        print("오류 발생:", e)

def run_process_json(json_data):
    # JSON 데이터를 문자열로 변환
    json_string = json.dumps(json_data)

    try:
        # process_json.py를 실행하여 JSON 문자열을 전달
        result = subprocess.run(
            ['/usr/bin/python3', '/home/ubuntu/travel_save.py', json_string],
            check=True, capture_output=True, text=True
        )
        print(f"process_json.py 실행 결과: {result.stdout}")
    except subprocess.CalledProcessError as e:
        print(f"process_json.py 실행 중 오류 발생: {e.stderr}")
    except Exception as e:
        print(f"오류 발생: {e}")

class JsonFileEventHandler(FileSystemEventHandler):
    def on_modified(self, event):
        absolute_json_path = os.path.abspath(json_file_path)

        if os.path.abspath(event.src_path) == absolute_json_path:
            print("JSON 파일이 변경되었습니다. 새로 읽습니다.")
            read_json_file()

if __name__ == "__main__":
    # JSON 파일 변경 감지 설정
    event_handler = JsonFileEventHandler()
    observer = Observer()
    observer.schedule(event_handler, path='/home/ubuntu', recursive=False)  # 현재 디렉토리에서 변경 사항 감지
    observer.start()

    try:
        print("JSON 파일 변경 감지를 시작합니다...")
        while True:
            time.sleep(1)  # 무한 루프
    except KeyboardInterrupt:
        observer.stop()
    observer.join()