# -*- coding: utf-8 -*-
"""travel_save

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uQ_64PTsWjrxxGdVmYHto-Yb1BYrAr45
"""

import json
import sys

# 전역 변수 선언
s_user_id = None
s_rating = None

def main():
    global s_user_id, s_rating # 전역 변수 사용 선언

        # 커맨드 라인 인자로 JSON 문자열을 받아옴
    if len(sys.argv) != 2:
        print("Usage: python3 process_json.py <json_string>")
        sys.exit(1)  # 프로그램 종료

    json_string = sys.argv[1]
    print("전달된 JSON 문자열:", json_string)  # 디버깅 출력

    try:
        # JSON 문자열을 파이썬 딕셔너리로 변환
        data = json.loads(json_string)

        # 데이터 변수에 저장
        s_user_id = data['userId']  # user_id를 추가
        s_rating = data['rating']  # rating을 추가
    except json.JSONDecodeError:
        print("JSON 파싱 중 오류 발생.")
    except Exception as e:
        print("오류 발생:", e)

if __name__ == "__main__":
    main()

import pandas as pd
import os
import chardet

# 사용자 데이터 예시
user_Id = s_user_id  # 새로운 사용자 ID
travel_rating = s_rating

# 데이터프레임 생성
places = list(travel_rating.keys())
scores = list(travel_rating.values())

new_data = {
    'user_Id': [user_Id] * len(travel_rating),
    'place_name': places,
    'score': scores,
}

new_df = pd.DataFrame(new_data)

# 기존 CSV 파일이 있는지 확인하고, 있으면 읽어오기
file_name = 'user_score.csv'

try:
    # 파일이 존재하면 인코딩 감지 후 파일 읽기
    if os.path.exists(file_name):
        with open(file_name, 'rb') as file:
            raw_data = file.read()
            result = chardet.detect(raw_data)
            encoding = result['encoding']

        # 감지된 인코딩으로 파일 읽기
        existing_df = pd.read_csv(file_name, encoding=encoding)

        # 업데이트 또는 추가
        for index, row in new_df.iterrows():
            # 같은 user_Id와 place_name이 있는 경우 score 업데이트
            mask = (existing_df['user_Id'] == row['user_Id']) & (existing_df['place_name'] == row['place_name'])
            if mask.any():
                existing_df.loc[mask, 'score'] = row['score']  # 점수 업데이트
            else:
                # pd.concat을 사용하여 새로운 행 추가
                existing_df = pd.concat([existing_df, pd.DataFrame([row])], ignore_index=True)

        combined_df = existing_df

    else:
        # 파일이 없으면 새로운 데이터프레임을 사용
        combined_df = new_df

    # 데이터프레임을 CSV 파일로 저장
    combined_df.to_csv(file_name, index=False, encoding='utf-8-sig')

    # 저장된 데이터프레임 출력
    print("저장된 데이터프레임:")
    print(combined_df)

except UnicodeDecodeError as e:
    print(f"인코딩 오류 발생: {e}")
except FileNotFoundError:
    print(f"파일이 존재하지 않습니다: {file_name}")
except Exception as e:
    print(f"오류 발생: {e}")

